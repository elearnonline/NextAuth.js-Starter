// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id            String @id @default(cuid())
  cityName      String
  countryName   String
  cityBoundries Float?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  reports       Report[]
  avatar        String?

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Report {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  published      Boolean    @default(false)
  title          String     @db.VarChar(255)
  author         User       @relation(fields: [userId], references: [id])
  authorId       Int?
  latitude       Decimal
  longitude      Decimal
  userId         String
  categoryId     Int
  categories     Category[]
  averageRaiting Float

}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  reports Report[]
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  TEAMADMIN
  DEVELOPER
}

model Feedback {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  feedbackType FeedbackType
  message      String
  email        String
  name         String
}

enum FeedbackType {
  ISSUE
  IDEA
  FEEDBACK
}
